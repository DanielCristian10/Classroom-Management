/**
 * @fileoverview apis-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: idm.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = require('./idm_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.IdmServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.IdmServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthRequest,
 *   !proto.AuthResponse>}
 */
const methodDescriptor_IdmService_Authenticate = new grpc.web.MethodDescriptor(
  '/IdmService/Authenticate',
  grpc.web.MethodType.UNARY,
  proto.AuthRequest,
  proto.AuthResponse,
  /**
   * @param {!proto.AuthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AuthResponse.deserializeBinary
);


/**
 * @param {!proto.AuthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AuthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AuthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.authenticate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/Authenticate',
      request,
      metadata || {},
      methodDescriptor_IdmService_Authenticate,
      callback);
};


/**
 * @param {!proto.AuthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AuthResponse>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.authenticate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/Authenticate',
      request,
      metadata || {},
      methodDescriptor_IdmService_Authenticate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.TokenRequest,
 *   !proto.TokenValidationResponse>}
 */
const methodDescriptor_IdmService_ValidateToken = new grpc.web.MethodDescriptor(
  '/IdmService/ValidateToken',
  grpc.web.MethodType.UNARY,
  proto.TokenRequest,
  proto.TokenValidationResponse,
  /**
   * @param {!proto.TokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.TokenValidationResponse.deserializeBinary
);


/**
 * @param {!proto.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.TokenValidationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.TokenValidationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.validateToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/ValidateToken',
      request,
      metadata || {},
      methodDescriptor_IdmService_ValidateToken,
      callback);
};


/**
 * @param {!proto.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.TokenValidationResponse>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.validateToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/ValidateToken',
      request,
      metadata || {},
      methodDescriptor_IdmService_ValidateToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.TokenRequest,
 *   !proto.DestroyTokenResponse>}
 */
const methodDescriptor_IdmService_DestroyToken = new grpc.web.MethodDescriptor(
  '/IdmService/DestroyToken',
  grpc.web.MethodType.UNARY,
  proto.TokenRequest,
  proto.DestroyTokenResponse,
  /**
   * @param {!proto.TokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.DestroyTokenResponse.deserializeBinary
);


/**
 * @param {!proto.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.DestroyTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.DestroyTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.destroyToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/DestroyToken',
      request,
      metadata || {},
      methodDescriptor_IdmService_DestroyToken,
      callback);
};


/**
 * @param {!proto.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.DestroyTokenResponse>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.destroyToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/DestroyToken',
      request,
      metadata || {},
      methodDescriptor_IdmService_DestroyToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_IdmService_CreateUser = new grpc.web.MethodDescriptor(
  '/IdmService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.UserRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_IdmService_CreateUser,
      callback);
};


/**
 * @param {!proto.UserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_IdmService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserIdRequest,
 *   !proto.UserResponse>}
 */
const methodDescriptor_IdmService_GetUserById = new grpc.web.MethodDescriptor(
  '/IdmService/GetUserById',
  grpc.web.MethodType.UNARY,
  proto.UserIdRequest,
  proto.UserResponse,
  /**
   * @param {!proto.UserIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserResponse.deserializeBinary
);


/**
 * @param {!proto.UserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.getUserById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/GetUserById',
      request,
      metadata || {},
      methodDescriptor_IdmService_GetUserById,
      callback);
};


/**
 * @param {!proto.UserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserResponse>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.getUserById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/GetUserById',
      request,
      metadata || {},
      methodDescriptor_IdmService_GetUserById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.UserList>}
 */
const methodDescriptor_IdmService_GetAllUsers = new grpc.web.MethodDescriptor(
  '/IdmService/GetAllUsers',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  proto.UserList,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserList.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.IdmServiceClient.prototype.getAllUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/IdmService/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_IdmService_GetAllUsers,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserList>}
 *     Promise that resolves to the response
 */
proto.IdmServicePromiseClient.prototype.getAllUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/IdmService/GetAllUsers',
      request,
      metadata || {},
      methodDescriptor_IdmService_GetAllUsers);
};


module.exports = proto;

