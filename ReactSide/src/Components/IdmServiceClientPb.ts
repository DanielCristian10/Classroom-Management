/**
 * @fileoverview apis-Web generated client stub for
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.12.4
// source: idm.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as idm_pb from '../mproto/idm_pb'; // proto import: "idm.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class IdmServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAuthenticate = new grpcWeb.MethodDescriptor(
    '/IdmService/Authenticate',
    grpcWeb.MethodType.UNARY,
    idm_pb.AuthRequest,
    idm_pb.AuthResponse,
    (request: idm_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    idm_pb.AuthResponse.deserializeBinary
  );

  authenticate(
    request: idm_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.AuthResponse>;

  authenticate(
    request: idm_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.AuthResponse) => void): grpcWeb.ClientReadableStream<idm_pb.AuthResponse>;

  authenticate(
    request: idm_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.AuthResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/Authenticate',
        request,
        metadata || {},
        this.methodDescriptorAuthenticate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/Authenticate',
    request,
    metadata || {},
    this.methodDescriptorAuthenticate);
  }

  methodDescriptorValidateToken = new grpcWeb.MethodDescriptor(
    '/IdmService/ValidateToken',
    grpcWeb.MethodType.UNARY,
    idm_pb.TokenRequest,
    idm_pb.TokenValidationResponse,
    (request: idm_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    idm_pb.TokenValidationResponse.deserializeBinary
  );

  validateToken(
    request: idm_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.TokenValidationResponse>;

  validateToken(
    request: idm_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.TokenValidationResponse) => void): grpcWeb.ClientReadableStream<idm_pb.TokenValidationResponse>;

  validateToken(
    request: idm_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.TokenValidationResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/ValidateToken',
        request,
        metadata || {},
        this.methodDescriptorValidateToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/ValidateToken',
    request,
    metadata || {},
    this.methodDescriptorValidateToken);
  }

  methodDescriptorDestroyToken = new grpcWeb.MethodDescriptor(
    '/IdmService/DestroyToken',
    grpcWeb.MethodType.UNARY,
    idm_pb.TokenRequest,
    idm_pb.DestroyTokenResponse,
    (request: idm_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    idm_pb.DestroyTokenResponse.deserializeBinary
  );

  destroyToken(
    request: idm_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.DestroyTokenResponse>;

  destroyToken(
    request: idm_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.DestroyTokenResponse) => void): grpcWeb.ClientReadableStream<idm_pb.DestroyTokenResponse>;

  destroyToken(
    request: idm_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.DestroyTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/DestroyToken',
        request,
        metadata || {},
        this.methodDescriptorDestroyToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/DestroyToken',
    request,
    metadata || {},
    this.methodDescriptorDestroyToken);
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/IdmService/CreateUser',
    grpcWeb.MethodType.UNARY,
    idm_pb.UserRequest,
    idm_pb.UserResponse,
    (request: idm_pb.UserRequest) => {
      return request.serializeBinary();
    },
    idm_pb.UserResponse.deserializeBinary
  );

  createUser(
    request: idm_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.UserResponse>;

  createUser(
    request: idm_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.UserResponse) => void): grpcWeb.ClientReadableStream<idm_pb.UserResponse>;

  createUser(
    request: idm_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorGetUserById = new grpcWeb.MethodDescriptor(
    '/IdmService/GetUserById',
    grpcWeb.MethodType.UNARY,
    idm_pb.UserIdRequest,
    idm_pb.UserResponse,
    (request: idm_pb.UserIdRequest) => {
      return request.serializeBinary();
    },
    idm_pb.UserResponse.deserializeBinary
  );

  getUserById(
    request: idm_pb.UserIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.UserResponse>;

  getUserById(
    request: idm_pb.UserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.UserResponse) => void): grpcWeb.ClientReadableStream<idm_pb.UserResponse>;

  getUserById(
    request: idm_pb.UserIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/GetUserById',
        request,
        metadata || {},
        this.methodDescriptorGetUserById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/GetUserById',
    request,
    metadata || {},
    this.methodDescriptorGetUserById);
  }

  methodDescriptorGetAllUsers = new grpcWeb.MethodDescriptor(
    '/IdmService/GetAllUsers',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    idm_pb.UserList,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    idm_pb.UserList.deserializeBinary
  );

  getAllUsers(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<idm_pb.UserList>;

  getAllUsers(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: idm_pb.UserList) => void): grpcWeb.ClientReadableStream<idm_pb.UserList>;

  getAllUsers(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: idm_pb.UserList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/IdmService/GetAllUsers',
        request,
        metadata || {},
        this.methodDescriptorGetAllUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/IdmService/GetAllUsers',
    request,
    metadata || {},
    this.methodDescriptorGetAllUsers);
  }

}

